require "std:math"
require "std:datatypes/tuple"
require "std:datatypes/error"
require "std:datatypes/list"
require "std:datatypes/optional"
require "std:datatypes/unit"
require "std:datatypes/string"

pub type Map<K, V> {
  Map(entries: list<Tuple<K, V>>)
}

pub fn Map::empty<K, V>(): Map<K, V> =>
  Map->Map([])

pub fn Map::insert<K, V>(self: Map<K, V>, key: K, value: V): Map<K, V> =>
  match self {
    case Map(entries) => Map->Map(entries + [(key, value)])
  }

pub fn Map::lookup<K, V>(self: Map<K, V>, key: K): Optional<V> =>
  match self {
    case Map(entries) =>
      match entries {
        case [] => None
        case [Tuple(k, v) .. rest] => if k == key then Some(v) else Map::lookup(Map->Map(rest), key)
      }
  }

pub fn Map::map<K, V, W>(self: Map<K, V>, f: fn(V): W): Map<K, W> =>
  match self {
    case Map(entries) => Map->Map(List::map(entries, fn (entry) => Tuple::mapSecond(entry, fn (v) => f(v))))
  }

pub fn Map::foldl<K, V, A>(self: Map<K, V>, f: fn(K, V, A): A, acc: A): A =>
  match self {
    case Map(entries) => List::foldl(fn (entry, acc) =>
      match entry {
        case Tuple(k, v) => f(k, v, acc)
      },
      acc,
      entries
    )
  }

pub fn Map::foldr<K, V, A>(self: Map<K, V>, f: fn(K, V, A): A, acc: A): A =>
  match self {
    case Map(entries) => List::foldr(fn (entry, acc) => 
      match entry {
        case Tuple(k, v) => f(k, v, acc)
      },
      acc,
      entries
    )
  }

pub fn Map::keys<K, V>(self: Map<K, V>): list<K> =>
  match self {
    case Map(entries) => List::map(entries, fn (entry) => Tuple::first(entry))
  }

pub fn Map::values<K, V>(self: Map<K, V>): list<V> =>
  match self {
    case Map(entries) => List::map(entries, fn (entry) => Tuple::second(entry))
  }

pub fn Map::fromList<K, V>(entries: list<Tuple<K, V>>): Map<K, V> =>
  Map->Map(entries)

pub fn Map::toString<K, V>(self: Map<K, V>): string =>
  match self {
    case Map(entries) => {
      let entriesString = List::foldl(
        fn (entry, acc) => 
          match entry {
            case Tuple(k, v) => acc + "$k: $v, "
          },
        "",
        entries
      )
      "{ $entriesString }"
    }
  }

pub fn Map::toList<K, V>(self: Map<K, V>): list<Tuple<K, V>> =>
  match self {
    case Map(entries) => entries
  }

pub fn Map::size<K, V>(self: Map<K, V>): int =>
  match self {
    case Map(entries) => List::length(entries)
  }

pub type Dynamic {
  Dyn::Integer(x: int),
  Dyn::Float(x: float),
  Dyn::String(x: string),
  Dyn::Bool(x: bool),
  Dyn::Map(x: Map<string, Dynamic>),
  Dyn::List(x: list<Dynamic>),
  Dyn::Unit
}

pub fn Dynamic::get(self: Dynamic, key: string): Optional<Dynamic> =>
  match self {
    case Dyn::Map(x) => Map::lookup(x, key)
    case _ => None
  }

pub fn Dynamic::toString(self: Dynamic): string =>
  match self {
    case Dyn::Integer(x) => x.toString()
    case Dyn::Float(x) => x.toString()
    case Dyn::String(x) => x
    case Dyn::Bool(x) => x.toString()
    case Dyn::Map(x) => Map::toString(x)
    case Dyn::List(x) => List::foldl(
      fn (elem, acc) => acc + elem.toString() + ", ",
      "",
      x
    )
    case Dyn::Unit => "null"
  }