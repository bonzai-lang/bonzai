require "std:natives"
require "std:list"

extern fn is_whitespace(c: char): bool
extern fn is_digit(c: char): bool
extern fn is_alpha(c: char): bool
extern fn is_alphanumeric(c: char): bool
extern fn slice<A>(xs: list<A>, start: int, end: int): list<A>
extern fn length<A>(xs: list<A>): int
extern fn explode(s: string): list<char>
extern fn implode(cs: list<char>): string
extern fn str_index(s: string, i: int): char
extern fn toInt(s: string): int
extern fn toFloat(s: string): float

type Result<A> {
  ParseResult(x: A, rest: string),
  ParseError(err: string, rest: string)
}

type Parser<A> { Parser(p: fn(string): Result<A>) }

fn runParser<A>(parser: Parser<A>, input: string): Result<A> =>
  match parser {
    case Parser(f) => f(input)
  }

fn parseError<A>(msg: string): Parser<A> =>
  Parser(fn(inp) => ParseError(msg, inp))

fn Parser::map<A, B>(self, f: fn(A): B): Parser<B> =>
  Parser(fn(input) =>
    match runParser(self, input) {
      case ParseResult(x, rest) => ParseResult(f(x), rest)
      case ParseError(msg, rest) => ParseError(msg, rest)
    }
  )

fn Parser::bind<A, B>(self, f: fn(A): Parser<B>): Parser<B> =>
  Parser(fn(input) =>
    match runParser(self, input) {
      case ParseResult(x, rest) => runParser(f(x), rest)
      case ParseError(msg, rest) => ParseError(msg, rest)
    }
  )

fn Parser::andThen<A, B>(self: Parser<A>, other: Parser<B>): Parser<B> =>
  Parser(fn(input) =>
    match runParser(self, input) {
      case ParseResult(_, rest) => runParser(other, rest)
      case ParseError(msg, rest) => ParseError(msg, rest)
    }
  )

fn Parser::pure<A>(x: A): Parser<A> =>
  Parser(fn(input) => ParseResult(x, input))

fn satisfy(pred: fn(char): bool): Parser<char> => {
  Parser(fn(input) => {
    match input.explode() {
      case [] => ParseError("Unexpected end of input", input)
      case [c .. cs] => if pred(c) 
        then ParseResult(c, cs.implode()) 
        else ParseError("Unexpected character", input)
    }
  })
}

fn char(c: char): Parser<char> =>
  satisfy(fn(x) => x == c)

fn string(s: string): Parser<string> => 
  Parser(fn(input) => {
    let len = length(s.explode())
    let str = slice(input.explode(), 0, len).implode()
    if str == s then ParseResult(s, input.explode.sliceFrom(len).implode) else ParseError("Unexpected string", input)
  })

let and = Parser::andThen

let anything = satisfy(fn(_) => true)

fn noneOf(cs: list<char>): Parser<char> =>
  satisfy(fn(c) => !List::elem(c, cs))

fn oneOf(cs: list<char>): Parser<char> =>
  satisfy(fn(c) => List::elem(c, cs))

fn many<A>(parser: Parser<A>): Parser<list<A>> =>
  Parser(fn(input) => {
    fn loop(input: string, acc: list<A>): Result<list<A>> => {
      match runParser(parser, input) {
        case ParseResult(x, rest) => loop(rest, acc + [x])
        case ParseError(_, _) => ParseResult(acc, input)
      }
    }
    loop(input, [])
  })

fn many1<A>(parser: Parser<A>): Parser<list<A>> =>
  Parser::bind(parser, fn(x) =>
    Parser::map(many(parser), fn(xs) => [x] + xs)
  )

fn sepBy<A, B>(parser: Parser<A>, sep: Parser<B>): Parser<list<A>> =>
  Parser(fn(input) => {
    fn loop(input: string, acc: list<A>): Result<list<A>> => {
      match runParser(parser, input) {
        case ParseResult(x, rest) => {
          match runParser(sep, rest) {
            case ParseResult(_, rest) => loop(rest, acc + [x])
            case ParseError(_, _) => ParseResult(acc + [x], rest)
          }
        }
        case ParseError(_, _) => ParseResult(acc, input)
      }
    }
    loop(input, [])
  })

fn sepBy1<A, B>(parser: Parser<A>, sep: Parser<B>): Parser<list<A>> =>
  Parser::bind(parser, fn(x) =>
    Parser::map(sepBy(parser, sep), fn(xs) => [x] + xs)
  )

fn between<A, B, C>(open: Parser<A>, close: Parser<C>, parser: Parser<B>): Parser<B> =>
  and(open, Parser::bind(parser, fn(x) => and(close, Parser::pure(x))))

fn right<A, B>(parser: Parser<A>, f: Parser<B>): Parser<B> =>
  Parser::andThen(parser, f)

fn left<A, B>(parser: Parser<A>, f: Parser<B>): Parser<A> =>
  Parser::bind(parser, fn(x) => Parser::andThen(f, Parser::pure(x)))

fn or<A>(parser1: Parser<A>, parser2: Parser<A>): Parser<A> =>
  Parser(fn(input) => {
    match runParser(parser1, input) {
      case ParseResult(x, rest) => ParseResult(x, rest)
      case ParseError(_, _) => runParser(parser2, input)
    }
  })

fn choice<A>(parsers: list<Parser<A>>): Parser<A> => 
  match parsers {
    case [] => parseError("No parsers provided")
    case [p] => p
    case [p..ps] => or(p, choice(ps))
  }

fn lazy<A>(f: fn(): Parser<A>): Parser<A> =>
  Parser(fn(input) => runParser(f(), input))

fn manyTill<A, B>(parser: Parser<A>, end: Parser<B>): Parser<list<A>> =>
  Parser(fn(input) => {
    fn loop(input: string, acc: list<A>): Result<list<A>> => {
      match runParser(end, input) {
        case ParseResult(_, rest) => ParseResult(acc, rest)
        case ParseError(_, _) => {
          match runParser(parser, input) {
            case ParseResult(x, rest) => loop(rest, acc + [x])
            case ParseError(_, _) => ParseError("Unexpected end of input", input)
          }
        }
      }
    }
    loop(input, [])
  })
  

fn manyN<A>(parser: Parser<A>, n: int): Parser<list<A>> =>
  Parser(fn(input) => {
    fn loop(input: string, acc: list<A>, n: int): Result<list<A>> => {
      if n == 0 then ParseResult(acc, input)
      else {
        match runParser(parser, input) {
          case ParseResult(x, rest) => loop(rest, acc + [x], n - 1)
          case ParseError(_, _) => ParseResult(acc, input)
        }
      }
    }
    loop(input, [], n)
  })