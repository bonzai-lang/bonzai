require "std:datatypes/error"
require "std:datatypes/tuple"
require "std:datatypes/string"
require "math"
require "std:datatypes/mutable"
require "std:datatypes/list"
require "std:io"
require "std:datatypes/map"
require "std:datatypes/unit"

extern fn start_http_server(port: int): HTTP
extern fn accept_request(server: HTTP): Request
extern fn close_client(req: Request)
extern fn get_buffer(req: Request): string
pub extern fn send_buffer(req: Request, buffer: string)
pub extern fn send_buffer_with(req: Request, buffer: string)
extern fn close_server(server: HTTP)
pub extern fn fetch(url: string): Throwable<(string, string)>
extern fn fetch_with(url: string, headers: string): Throwable<(string, string)>
extern fn redirect_to(req: Request, url: string): unit
extern fn get_path(req: Request): string
pub extern fn make_unit(): unit
pub extern fn post_data(url: string, data: string, headers: string): Throwable<(string, string)>

type Header {
  Header(code: int, reason: string)
}

pub fn Header::show(header: Header): string => match header {
  case Header(code, reason) => "HTTP/1.1 $code $reason"
}

pub fn Map::mapToHeaders(headers: Map<string>): string => {
  mut headersString = ""
  mut i = 0
  
  match headers {
    case Map(entries) => {
      while i.value < List::length(entries) {
        match entries[i.value] {
          case Tuple(key, val) => {
            headersString = headersString.value + "$key: $val\r\n"
            i = i.value + 1
          }
        }
      }
    }
  }

  headersString.value
}

fn respondHeaders(req: Request, buffer: Map<string>, header_line: Header, content: string) => {
  let headers = Map::mapToHeaders(buffer)

  req.send_buffer_with(Header::show(header_line) + "\r\n" + headers + "\r\n" + content)
}

fn respondOk(req: Request, buffer: Map<string>, content: string) => {
  respondHeaders(req, buffer, Header(200, "OK"), content)
}

fn respondText(req: Request, ty: string, content: string) =>
  req.respondOk({
    "Content-Type": ty,
    "Content-Length": String::length(content).toString,
    "Connection": "close"
  }, content)

pub fn fetchWithHeaders(url: string, headers: Map<string>): Throwable<(string, string)> => {
  match fetch_with(url, Map::mapToHeaders(headers)) {
    case Ok(Tuple(buffer, content)) => Ok(Tuple(buffer, content))
    case Error(e) => Error(e)
  }
}
