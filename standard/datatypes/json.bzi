require "std:datatypes/optional"
require "std:language/parser"
require "std:datatypes/tuple": Tuple::first, Tuple, Tuple::second, Map::toList
require "std:datatypes/list"
require "std:datatypes/map"
require "std:datatypes/string"
require "std:math"
require "std:datatypes/error"
require "std:datatypes/unit"
require "std:io"
require "std:datatypes/mutable"

pub type JSON {
  Object(fields: list<(string, JSON)>),
  Array(values: list<JSON>),
  String(value: string),
  Integer(value: int),
  Float(value: float),
  Boolean(value: bool),
  Null
}

fn jsonParser(input: list<char>): Throwable<JSON> => {
  mut i = 0
  let len = input.length

  fn whitespace(i: mut int) => {
    while i.value < len {
      if (input[i.value]).is_whitespace() then {
        i += 1
      } else {
        break
      }
    }

    unit
  }

  fn parseString(i: mut int): Throwable<JSON> => {
    if i.value < len && input[i.value] == '"' then {
      i += 1 // Skip the opening quote
      let start = i.value

      while i.value < len && input[i.value] != '"' {
        i += 1
      }

      if i.value < len && input[i.value] == '"' then {
        let strValue = input.slice(start, i.value)
        i += 1 // Skip the closing quote
        Ok(JSON->String(strValue.implode()))
      } else {
        Error("Unterminated string at position $i")
      }
    } else {
      Error("Expected string at position $i")
    }
  }

  fn parseNumber(i: mut int): Throwable<JSON> => {
    let start = i.value

    while i.value < len && ((input[i.value]).is_digit() || input[i.value] == '.' || input[i.value] == '-') {
      i += 1
    }

    if start < i.value then {
      let numStr = input.slice(start, i.value).implode()
      if String::includes('.', numStr) then {
        Ok(JSON->Float(numStr.toFloat()))
      } else {
        Ok(JSON->Integer(numStr.toInt()))
      }
    } else {
      Error("Expected number at position $i")
    }
  }

  fn parseArray(i: mut int, parseValue: fn(mut int): Throwable<JSON>): Throwable<JSON> => {
    if i.value < len && input[i.value] == '[' then {
      i += 1 // Skip the opening bracket
      whitespace(i)

      mut values = []

      while i.value < len && input[i.value] != ']' {
        let val = parseValue(i)
        match val {
          case Ok(v) => { values += [v] }
          case Error(e) => { return Error(e) }
        }
        whitespace(i)

        if (i.value < len) && (input[i.value] == ',') then {
          i += 1 // Skip the comma
          whitespace(i)
        }
      }

      if i.value < len && input[i.value] == ']' then {
        i += 1 // Skip the closing bracket
        Ok(JSON->Array(values.value))
      } else {
        Error("Expected ']' at position $i")
      }
    } else {
      Error("Expected '[' at position $i")
    }
  }

  fn parseValue(i: mut int): Throwable<JSON> => {
    match input.sliceFrom(i.value) {
      case [] => Error("Empty input")
      case ['t', 'r', 'u', 'e' .. _] => {
        i += 4 // Skip the 'true'
        Ok(JSON->Boolean(true))
      }
      case ['f', 'a', 'l', 's', 'e' .. _] => {
        i += 5 // Skip the 'false'
        Ok(JSON->Boolean(false))
      }
      case ['n', 'u', 'l', 'l' .. _] => { 
        i += 4 // Skip the 'null'
        Ok(JSON->Null)
      }
      case ['"' .. _] => parseString(i)
      case ['{' .. _] => {
        i += 1 // Skip the opening brace
        whitespace(i)

        mut fields = []

        while i.value < len && input[i.value] != '}' {
          let key = parseString(i)
          match key {
            case Ok(String(k)) => {
              whitespace(i)
              if i.value < len && input[i.value] == ':' then {
                i += 1 // Skip the colon
                whitespace(i)
                let val = parseValue(i)
                match val {
                  case Ok(v) => { fields += [(k, v)] }
                  case Error(e) => { return Error(e) }
                }
              } else {
                return Error("Expected ':' after key at position $i")
              }
            }
            case Error(e) => { return Error(e) }
          }

          whitespace(i)

          if i.value < len && input[i.value] == ',' then {
            i += 1 // Skip the comma
            whitespace(i)
          }
        }

        if i.value < len && input[i.value] == '}' then {
          i += 1 // Skip the closing brace
          Ok(JSON->Object(fields.value))
        } else {
          Error("Expected '}' at position $i")
        }
      }

      case ['[' .. _] => parseArray(i, parseValue)

      case [c .. _] => {
        if is_digit(c) || c == '-' then {
          parseNumber(i)
        } else {
          Error("Unexpected character '$c' at position $i")
        }
      }
    }
  }

  whitespace(i)
  let result = parseValue(i)
  whitespace(i)

  result
}

fn parseJsonWithError(input: string): Throwable<JSON> => jsonParser(input.explode()) 

fn parseJSON(input: string): Optional<JSON> => 
  match jsonParser(input.explode()) {
    case Ok(x) => Some(x)
    case Error(_) => None
  }

fn getJSON(input: string): JSON =>
  match parseJSON(input) {
    case Some(x) => x
    case None => JSON->Null
  }

pub fn JSON::parse(input: string): JSON => getJSON(input)

pub fn JSON::stringify(json: JSON): string =>
  match json {
    case Object(fields) => {
      let pairs = List::map(fields, fn (v) => 
        "\"" 
          + Tuple::first(v) 
          + "\":" 
          + JSON::stringify(Tuple::second(v))
      )

      "{" + String::join(pairs, ",") + "}"
    }
    case Array(values) => 
      "[" + String::join(List::map(values, JSON::stringify), ",") + "]"
    case String(val) => "\"" + val + "\""
    case Integer(val) => val.toString()
    case Float(val) => val.toString()
    case Boolean(val) => if val then "true" else "false"
    case Null => "null"
  }

pub fn getKey(json: JSON, key: string): Optional<JSON> =>
  match json {
    case Object(fields) => {
      List::foldl(fn (field, acc) =>
        match acc {
          case Some(x) => Some(x)
          case None => 
            if Tuple::first(field) == key 
              then Some(Tuple::second(field)) 
              else None
        },
        None,
        fields
      )
    }
    case _ => None
  }

pub fn getKeys(json: JSON, keys: list<string>): Optional<JSON> =>
  List::foldl(fn (key, acc) =>
    match acc {
      case Some(x) => getKey(x, key)
      case None => None
    },
    Some(json),
    keys
  )

pub fn JSON::prettify(json: JSON, tabs _?: int): string => {
  let i = Optional::unwrapOr(kwargs->tabs, 0)  

  match json {
    case Object(fields) => {
      let pairs = List::map(fields, fn (v) => 
        String::concat([
          String::repeat(" ", i + 2), 
          "\"", 
          Tuple::first(v), 
          "\": ", 
          JSON::prettify(Tuple::second(v), tabs: i + 2)
        ])
      )

      String::concat([
        "{\n", 
        String::repeat(" ", i), 
        String::join(pairs, ",\n"), 
        "\n", 
        String::repeat(" ", i), 
        "}"
      ])
    }
    case Array(values) => {
      let items = List::map(values, fn (v) => 
        String::concat([
          "\n", 
          String::repeat(" ", i + 2), 
          JSON::prettify(v, tabs: i + 2)
        ])
      )

      String::concat([
        "[", 
        String::repeat(" ", i), 
        String::join(items, ","), 
        "\n", 
        String::repeat(" ", i), 
        "]"
      ])
    }
    case _ => JSON::stringify(json)
  }
}