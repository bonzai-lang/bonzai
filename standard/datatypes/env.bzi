require "std:language/parser": 
  many, satisfy, is_whitespace, many1,
  implode, Parser::bind, Parser::map, 
  is_alphanumeric, right, char, sepBy, 
  runParser
require "std:math"
require "std:io"
require "std:datatypes/optional"
require "std:datatypes/map"
require "std:datatypes/tuple"
require "std:datatypes/list"
require "std:datatypes/string"

type Environment(fields: Map<string>)

fn parseEnv(): Parser<Environment> => {
  let ws = satisfy(is_whitespace).many()

  let Field::name = many1(satisfy(is_alphanumeric)) :Parser::map: fn(xs) => xs.implode()
  let Field::value = many1(satisfy(fn (c) => c != '\n')) :Parser::map: fn(xs) => xs.implode()

  let field = Field::name :Parser::bind: fn(name) => 
                ws 
                  :right: char('=') 
                  :right: ws 
                  :right: Field::value
                  :Parser::map: fn(value) => (name, value)

  let environment = field.sepBy(char('\n')) :Parser::map: fn(xs) => Environment(Map(xs))

  environment
}

pub fn Environment::load(filename: string): Environment => {
  let file = read_file(filename)

  match runParser(parseEnv(), file) {
    case ParseResult(env, _) => env
    case ParseError(msg, _) => panic(msg)
  }
}

pub fn Environment::get(self: Environment, name: string): Optional<string> => {
  match self {
    case Environment(fields_) => Map::lookup(fields_, name)
  }
}

pub fn Environment::set(self: Environment, name: string, value: string): Environment => {
  match self {
    case Environment(fields) => Environment(Map::insert(fields, name, value))
  }
}

pub fn Environment::save(self: Environment, filename: string): unit => {
  let fields = match self {
    case Environment(fields) => fields
  }

  let file = String::join(Map::toList(fields)
              .map(fn (tpl) => match tpl {
                case Tuple(name, value) => "$name=$value"
              }), "\n")

  write_file(filename, file)
}