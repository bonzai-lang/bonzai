require "std:datatypes/list"
require "std:math"
require "std:datatypes/unit"
require "std:datatypes/optional"
require "std:datatypes/mutable"
require "std:io"

pub extern fn toString<A>(x: A): string

pub extern fn explode(s: string): list<char>
pub extern fn implode(xs: list<char>): string
extern fn slice_string(s: string, start: int, end: int): string
extern fn split(str: string, sep: string): list<string>
pub extern fn getIndex(s: string, i: int): string
pub extern fn getIndexChar(s: string, i: int): char

pub fn String::explode(s: string): list<char> => explode(s)

pub fn String::implode(xs: list<char>): string => implode(xs)

pub fn String::join(xs: list<string>, sep: string): string =>
  List::foldl(fn(x, acc) => if acc == "" then x else acc + sep + x, "", xs)

pub let String::length = length

pub fn String::map(s: string, f: fn(char): char): string => {
  let sLength = String::length(s)
  mut i = 0
  mut str = ""

  while i.value < sLength {
    let c = getIndexChar(s, i.value)
    str += f(c).toString()
    i += 1
  }

  str.value
}

pub fn String::slice(s: string, start _?: int, end _?: int): string => {
  let start = Optional::unwrap_or(kwargs->start, 0)
  let end = Optional::unwrap_or(kwargs->end, String::length(s))

  slice_string(s, start, end)
}

pub fn String::includes(c: char, s: string): bool => {
  let sLength = String::length(s)
  mut i = 0

  while i.value < sLength {
    let currentChar = getIndexChar(s, i.value)
    if currentChar == c then {
      return true
    }
    i += 1
  }

  false
}

pub fn String::repeat(s: string, n: int): string =>
  if n == 0 then "" else s + String::repeat(s, n - 1)

pub fn String::concat(xs: list<string>): string =>
  List::foldl(fn(x, acc) => acc + x, "", xs)

pub fn String::trimStart(s: string): string => {
  let sLength = String::length(s)
  mut i = 0

  // Trouver le premier caractère non-blanc
  while i.value < sLength {
    let c = getIndexChar(s, i.value)
    if c == ' ' && c == '\n' && c == '\t' then {
      i += 1
    } else {
      break
    }
  }

  // Retourner la sous-chaîne jusqu'à ce point
  String::slice(s, start: i.value)
}

pub fn String::trimEnd(s: string): string => {
  let sLength = String::length(s)

  if sLength == 0 then {
    ""
  } else {
    mut i = sLength - 1

    // Trouver le dernier caractère non-blanc
    while i.value >= 0 {
      let c = getIndexChar(s, i.value)
      if c == ' ' && c == '\n' && c == '\t' then {
        i -= 1
      } else {
        break
      }
    }

    // Retourner la sous-chaîne jusqu'à ce point
    String::slice(s, start: 0, end: i.value + 1)
  }
}

pub fn String::trim(s: string): string => 
  String::trimEnd(String::trimStart(s))

pub fn String::startsWith(s: string, prefix: string): bool => {
  let prefixLength = String::length(prefix)
  let sLength = String::length(s)

  if prefixLength > sLength then {
    false
  } else {
    let prefixSlice = String::slice(s, start: 0, end: prefixLength)
    prefixSlice == prefix
  }
}

pub fn String::indexOf(s: string, sub: string): int => {
  let subLength = String::length(sub)
  let sLength = String::length(s)

  fn indexOfHelper(s: string, sub: string, index: int): int => {
    let pre = String::slice(s, start: index)
    if String::startsWith(pre, sub) then {
      index
    } else if index + subLength >= sLength then {
      -1
    } else {
      indexOfHelper(s, sub, index + 1)
    }
  }

  if subLength == 0 || sLength == 0 then {
    -1
  } else {
    indexOfHelper(s, sub, 0)
  }
}

pub fn String::split(str: string, sep: string): list<string> => split(str, sep)