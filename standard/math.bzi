extern fn mul_value<A>(x: A, y: A): A
extern fn add_value<A>(x: A, y: A): A
extern fn sub_value<A>(x: A, y: A): A
extern fn div_value<A>(x: A, y: A): A
extern fn mod_value<A>(x: A, y: A): A

extern fn and_value(x: bool, y: bool): bool
extern fn or_value(x: bool, y: bool): bool
extern fn not_value(x: bool): bool

extern fn eq_value<A>(x: A, y: A): bool
extern fn neq_value<A>(x: A, y: A): bool
extern fn lt_value<A>(x: A, y: A): bool
extern fn gt_value<A>(x: A, y: A): bool
extern fn lte_value<A>(x: A, y: A): bool
extern fn gte_value<A>(x: A, y: A): bool

let (==) = eq_value
let (!=) = neq_value
let (<) = lt_value
let (>) = gt_value
let (<=) = lte_value
let (>=) = gte_value

let (+) = add_value
let (-) = sub_value
let (*) = mul_value
let (/) = div_value
let (%) = mod_value

fn (&&) (x: bool, y: bool): bool => if x then y else false
fn (||) (x: bool, y: bool): bool => if x then true else y
fn (!) (x: bool): bool => if x then false else true

extern fn randomValue(): int
extern fn itof(i: int): float
extern fn ftoi(f: float): int

let random = randomValue