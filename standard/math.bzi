require "std:datatypes/unit"
require "std:datatypes/optional"

extern fn mul_value<A>(x: A, y: A): A
extern fn add_value<A>(x: A, y: A): A
extern fn sub_value<A>(x: A, y: A): A
extern fn div_value<A>(x: A, y: A): A
extern fn mod_value<A>(x: A, y: A): A

extern fn and_value(x: bool, y: bool): bool
extern fn or_value(x: bool, y: bool): bool
extern fn not_value(x: bool): bool

extern fn eq_value<A>(x: A, y: A): bool
extern fn neq_value<A>(x: A, y: A): bool
extern fn lt_value<A>(x: A, y: A): bool
extern fn gt_value<A>(x: A, y: A): bool
extern fn lte_value<A>(x: A, y: A): bool
extern fn gte_value<A>(x: A, y: A): bool

pub fn (==)<A>(x: A, y: A): bool => eq_value(x, y)
pub fn (!=)<A>(x: A, y: A): bool => neq_value(x, y)
pub fn (<)<A>(x: A, y: A): bool => lt_value(x, y)
pub fn (>)<A>(x: A, y: A): bool => gt_value(x, y)
pub fn (<=)<A>(x: A, y: A): bool => lte_value(x, y)
pub fn (>=)<A>(x: A, y: A): bool => gte_value(x, y)

pub fn (+)<A>(x: A, y: A): A => add_value(x, y)
pub fn (-)<A>(x: A, y: A): A => sub_value(x, y)
pub fn (*)<A>(x: A, y: A): A => mul_value(x, y)
pub fn (/)<A>(x: A, y: A): A => div_value(x, y)
pub fn (%)<A>(x: A, y: A): A => mod_value(x, y)

pub fn (&&) (x: bool, y: bool): bool => if x then y else false
pub fn (||) (x: bool, y: bool): bool => if x then true else y
pub fn (!) (x: bool): bool => if x then false else true

extern fn randomValue(): int
extern fn itof(i: int): float
extern fn ftoi(f: float): int

pub fn random(): int => randomValue()