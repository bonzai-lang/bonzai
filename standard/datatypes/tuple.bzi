require "std:datatypes/error"
require "std:datatypes/unit"
require "std:math"
require "std:datatypes/optional"

pub type Tuple<A, B> {
  Tuple(x: A, y: B)
}

pub fn Tuple::first(self) => 
  match self {
    case Tuple(x, _) => x
  }

pub fn Tuple::second(self) =>
  match self {
    case Tuple(_, y) => y
  }

pub fn Tuple::mapFirst<A, B, C>(self, f: fn(A): B) =>
  match self {
    case Tuple(x, y) => (f(x), y)
  }

pub fn Tuple::mapSecond<A, B, C>(self, f: fn(B): C) =>
  match self {
    case Tuple(x, y) => (x, f(y))
  }

pub fn Tuple::map<A, B, C, D>(self, f: fn(A): B, g: fn(C): D) =>
  match self {
    case Tuple(x, y) => (f(x), g(y))
  }

pub fn Tuple::swap<A, B>(self) =>
  match self {
    case Tuple(x, y) => (y, x)
  }
