require "std:math"
require "std:datatypes/optional"

pub extern fn length<A>(xs: list<A>): int
pub extern fn sliceFrom<A>(xs: list<A>, i: int): list<A>

pub fn List::elem<A>(x: A, xs: list<A>): bool =>
  match xs {
    case [] => false
    case [y .. ys] => if x == y then true else List::elem(x, ys)
  }

pub fn List::map<A, B>(xs: list<A>, f: fn(A): B): list<B> =>
  match xs {
    case [] => []
    case [y .. ys] => [f(y)] + List::map(ys, f)
  }

pub let map = List::map

pub fn List::foldl<A, B>(f: fn(A, B): B, acc: B, xs: list<A>): B =>
  match xs {
    case [] => acc
    case [y .. ys] => List::foldl(f, f(y, acc), ys)
  }

pub fn List::foldr<A, B>(f: fn(A, B): B, acc: B, xs: list<A>): B =>
  match xs {
    case [] => acc
    case [y .. ys] => f(y, List::foldr(f, acc, ys))
  }

pub fn List::length<A>(xs: list<A>): int =>
  match xs {
    case [] => 0
    case [x .. xs] => 1 + List::length(xs)
  }

pub fn List::join<A>(xs: list<A>, sep: A): list<A> =>
  match xs {
    case [] => []
    case [x] => [x]
    case [x .. xs] => [x, sep] + List::join(xs, sep)
  }

pub fn List::find<A>(f: fn(A): bool, xs: list<A>): Optional<A> =>
  match xs {
    case [] => None
    case [x .. xs] => if f(x) then Some(x) else List::find(f, xs)
  }
