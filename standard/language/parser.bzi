require "std:datatypes/list"
require "std:math"
require "std:datatypes/string"
require "std:datatypes/unit"
require "std:datatypes/mutable"
require "std:io"
require "std:datatypes/optional"

pub extern fn is_whitespace(c: char): bool
pub extern fn is_digit(c: char): bool
pub extern fn is_alpha(c: char): bool
pub extern fn is_alphanumeric(c: char): bool
pub extern fn toInt(s: string): int
pub extern fn toFloat(s: string): float
extern fn list_equals_string(xs: list<char>, s: string): bool

pub type Result<A> {
  ParseResult(x: A, rest: list<char>),
  ParseError(err: string, rest: list<char>)
}

pub fn Parser::try<A>(parser: fn(list<char>): Result<A>): fn(list<char>): Result<A> =>
  fn(input) => {
    match parser(input) {
      case ParseResult(x, rest) => Result->ParseResult(x, rest)
      case ParseError(msg, rest) => Result->ParseError("Error: $msg", rest)
    }
  }

pub fn Parser::map<A, B>(
  self: fn(list<char>): Result<A>,
  f: fn(A): B
): fn(list<char>): Result<B> =>
  fn(input) => {
    match self(input) {
      case ParseResult(x, rest) => Result->ParseResult(f(x), rest)
      case ParseError(msg, rest) => Result->ParseError(msg, rest)
    }
  }
  
pub fn Parser::bind<A, B>(
  self: fn(list<char>): Result<A>,
  f: fn(A): fn(list<char>): Result<B>
): fn(list<char>): Result<B> =>
  fn(input) => {
    match self(input) {
      case ParseResult(x, rest) => f(x)(rest)
      case ParseError(msg, rest) => Result->ParseError(msg, rest)
    }
  }

pub fn Parser::andThen<A, B>(
  self: fn(list<char>): Result<A>,
  other: fn(list<char>): Result<B>
): fn(list<char>): Result<B> =>
  fn(input) => {
    match self(input) {
      case ParseResult(_, rest) => other(rest)
      case ParseError(msg, rest) => Result->ParseError(msg, rest)
    }
  }

pub fn Parser::or<A>(
  self: fn(list<char>): Result<A>,
  other: fn(list<char>): Result<A>
): fn(list<char>): Result<A> =>
  fn(input): Result<A> => {
    match self(input) {
      case ParseResult(x, rest) => Result->ParseResult(x, rest)
      case ParseError(_, _) => other(input)
    }
  }

pub fn Parser::choice<A>(
  parsers: list<fn(list<char>): Result<A>>
): fn(list<char>): Result<A> =>
  fn(input) => {
    match parsers {
      case [] => Result->ParseError("No parsers available", input)
      case [p] => p(input)
      case [p .. ps] => Parser::or(p, Parser::choice(ps))(input)
    }
  }

pub fn Parser::satisfy(
  pred: fn(char): bool
): fn(list<char>): Result<char> =>
  fn(input) => {
    match input {
      case [] => Result->ParseError("Unexpected end of input", input)
      case [c .. cs] => if pred(c) 
        then Result->ParseResult(c, cs) 
        else Result->ParseError("Unexpected character $c", input)
    }
  }

pub fn Parser::char(c: char): fn(list<char>): Result<char> =>
  Parser::satisfy(fn(x) => x == c)

pub fn Parser::string(s: string): fn(list<char>): Result<string> =>
  fn(input) => {
    let len = length(s)
    let inputLen = length(input)
    let str = List::slice(input, end: len)
    if list_equals_string(str, s) 
      then Result->ParseResult(s, List::slice(input, start: len, end: inputLen)) 
      else Result->ParseError("Unexpected string $s", input)
  }

pub fn Parser::anything(): fn(list<char>): Result<char> =>
  Parser::satisfy(fn(_) => true)

pub fn Parser::noneOf(cs: list<char>): fn(list<char>): Result<char> =>
  Parser::satisfy(fn(c) => !List::elem(c, cs))

pub fn Parser::oneOf(cs: list<char>): fn(list<char>): Result<char> =>
  Parser::satisfy(fn(c) => List::elem(c, cs))

pub fn Parser::many<A>(
  parser: fn(list<char>): Result<A>
): fn(list<char>): Result<list<A>> =>
  fn(input) => {
    // Iterative approach
    mut acc = []
    mut newInput = input

    while true {
      match parser(newInput.value) {
        case ParseResult(x, rest) => {
          acc += [x]
          newInput = rest
        }
        case ParseError(_, _) => {
          break
        }
      }
    }

    Result->ParseResult(acc.value, newInput.value)
  }

pub fn Parser::many1<A>(
  parser: fn(list<char>): Result<A>
): fn(list<char>): Result<list<A>> =>
  fn(input) => {
    match parser(input) {
      case ParseResult(x, rest) => {
        let acc = [x]
        match Parser::many(parser)(rest) {
          case ParseResult(xs, rest) => Result->ParseResult(acc + xs, rest)
          case ParseError(_, rest) => Result->ParseResult(acc, rest)
        }
      }
      case ParseError(_, _) => Result->ParseError("Unexpected end of input", input)
    }
  }

pub fn Parser::sepBy<A, B>(
  parser: fn(list<char>): Result<A>,
  sep: fn(list<char>): Result<B>
): fn(list<char>): Result<list<A>> =>
  fn(input) => {
    // Iterative approach
    mut acc = []
    mut newInput = input

    while true {
      match parser(newInput.value) {
        case ParseResult(x, rest) => {
          acc += [x]
          newInput = rest
          match sep(newInput.value) {
            case ParseResult(_, rest) => {
              newInput = rest
            }
            case ParseError(_, _) => {
              break
            }
          }
        }
        case ParseError(_, _) => {
          break
        }
      }
    }

    Result->ParseResult(acc.value, newInput.value)
  }

pub fn Parser::sepBy1<A, B>(
  parser: fn(list<char>): Result<A>,
  sep: fn(list<char>): Result<B>
): fn(list<char>): Result<list<A>> =>
  fn (input) => {
    match parser(input) {
      case ParseResult(x, rest) => {
        let acc = [x]
        match Parser::sepBy(parser, sep)(rest) {
          case ParseResult(xs, rest) => Result->ParseResult(acc + xs, rest)
          case ParseError(_, rest) => Result->ParseResult(acc, rest)
        }
      }
      case ParseError(_, _) => Result->ParseError("Unexpected end of input", input)
    }
  }

pub fn Parser::between<A, B, C>(
  open: fn(list<char>): Result<A>,
  close: fn(list<char>): Result<C>,
  parser: fn(list<char>): Result<B>
): fn(list<char>): Result<B> =>
  Parser::andThen(open, Parser::bind(parser, fn(x) => Parser::andThen(close, fn(input) => Result->ParseResult(x, input))))

pub fn Parser::right<A, B>(
  parser: fn(list<char>): Result<A>,
  f: fn(list<char>): Result<B>
): fn(list<char>): Result<B> =>
  Parser::andThen(parser, f)

pub fn Parser::left<A, B>(
  parser: fn(list<char>): Result<A>,
  f: fn(list<char>): Result<B>
): fn(list<char>): Result<A> =>
  Parser::bind(parser, fn(x) => Parser::andThen(f, fn(input) => Result->ParseResult(x, input)))

pub fn Parser::manyTill<A, B>(
  parser: fn(list<char>): Result<A>,
  end: fn(list<char>): Result<B>
): fn(list<char>): Result<list<A>> =>
  fn(input) => {
    fn loop(input, acc: list<A>): Result<list<A>> => {
      match end(input) {
        case ParseResult(_, rest) => Result->ParseResult(acc, rest)
        case ParseError(_, _) => {
          match parser(input) {
            case ParseResult(x, rest) => loop(rest, acc + [x])
            case ParseError(_, _) => Result->ParseError("Unexpected end of input", input)
          }
        }
      }
    }
    loop(input, [])
  }

pub fn Parser::manyN<A>(
  parser: fn(list<char>): Result<A>,
  n: int
): fn(list<char>): Result<list<A>> =>
  fn(input) => {
    fn loop(input, acc: list<A>, n: int): Result<list<A>> => {
      if n == 0 then Result->ParseResult(acc, input)
      else {
        match parser(input) {
          case ParseResult(x, rest) => loop(rest, acc + [x], n - 1)
          case ParseError(_, _) => Result->ParseResult(acc, input)
        }
      }
    }
    loop(input, [], n)
  }

pub fn Parser::lazy<A>(
  f: fn(): fn(list<char>): Result<A>
): fn(list<char>): Result<A> =>
  fn(input) => f()(input)