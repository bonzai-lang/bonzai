require "std:language/parser"
require "std:math"
require "std:io"
require "std:datatypes/optional"
require "std:datatypes/map"
require "std:datatypes/tuple"
require "std:datatypes/list"
require "std:datatypes/string"
require "std:datatypes/unit"

type Environment(fields: Map<string>)

fn parseEnv(): Throwable<Environment> => {
  mut i = 0

  fn whitespace(i: mut int, input: list<string>) => {
    while i.value < input.length {
      if (input[i.value]).is_whitespace() then {
        i += 1
      } else {
        break
      }
    }
    unit
  }

  fn parseLine(i: mut int, input: list<string>): Throwable<Tuple<string, string>> => {
    if i.value < input.length then {
      let line = input[i.value]
      let parts = line.split("=")

      if parts.length == 2 then {
        i += 1
        Ok(Tuple((parts[0]).trim(), (parts[1]).trim()))
      } else {
        Error("Invalid line format: " + line)
      }
    } else {
      Error("End of input reached")
    }
  }

  fn parseEnvLines(i: mut int, input: list<string>, acc: Map<string>): Throwable<Map<string>> => {
    whitespace(i, input)

    if i.value >= input.length then {
      Ok(acc)
    } else {
      match parseLine(i, input) {
        case Ok(Tuple(name, value)) => {
          let newAcc = Map::insert(acc, name, value)
          parseEnvLines(i, input, newAcc)
        }
        case Error(msg) => Error(msg)
      }
    }
  }
  
  parseEnvLines(i, input, Map::empty())
}

pub fn Environment::load(filename: string): Environment => {
  let file = read_file(filename)

  match parseEnv(file.explode()) {
    case ParseResult(env, _) => env
    case ParseError(msg, _) => panic(msg)
  }
}

pub fn Environment::get(self: Environment, name: string): Optional<string> => {
  match self {
    case Environment(fields_) => Map::lookup(fields_, name)
  }
}

pub fn Environment::set(self: Environment, name: string, value: string): Environment => {
  match self {
    case Environment(fields) => Environment(Map::insert(fields, name, value))
  }
}

pub fn Environment::save(self: Environment, filename: string): unit => {
  let fields = match self {
    case Environment(fields) => fields
  }

  let file = String::join(Map::toList(fields)
              .map(fn (tpl) => match tpl {
                case Tuple(name, value) => "$name=$value"
              }), "\n")

  write_file(filename, file)
}
