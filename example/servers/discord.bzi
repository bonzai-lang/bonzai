require "std:http/websocket"
require "std:datatypes/tuple"
require "std:http"
require "std:datatypes/json"
require "std:io"
require "std:math"
require "std:datatypes/string"

let TOKEN = "TOKEN"

let BASE_URL = "https://discord.com/api/v10"
let GATEWAY_URL = "wss://gateway.discord.gg/?v=10&encoding=json"

let HEADERS = #{
  Authorization: "Bot $TOKEN",
  "Content-Type": "application/json"
}

interface Heartbeat {
  fn startHeartbeat(self: Heartbeat, ws: Websocket, interval: int)
}

actor HB < Heartbeat {
  on startHeartbeat(self, ws, interval) => {
    let heartbeat = JSON::stringifyMap(#{
      op: Integer(1),
      d: Null
    })

    print(heartbeat)

    sendTextFrame(ws, heartbeat)

    print("Sent heartbeat payload")

    wait_time(interval)
    self->startHeartbeat(self, ws, interval)
  }
}

let ws = initWebsocket("gateway.discord.gg", 443, true)
performHandshake(ws, "/?v=10&encoding=json", "gateway.discord.gg", 443)

let frame = receiveFrame(ws)
let data = frame.getJSON

match data.getKeys(["d", "heartbeat_interval"]) {
  case Some(Integer(interval)) => {
    print(interval)
    let response = JSON::stringifyMap(#{
      op: Integer(2),
      d: #{
        token: String(TOKEN),
        intents: Integer(4608),
        properties: #{
          "\$os": String("macos"),
          "\$browser": String("my_library"),
          "\$device": String("my_library")
        }.JSON::fromMap,

        presence: #{
          status: String("dnd"),
          since: Integer(91879201),
          afk: Boolean(false)
        }.JSON::fromMap
      }.JSON::fromMap
    })

    print(response)

    sendTextFrame(ws, response)

    print("Sent identify payload")

    let hb = spawn HB
    hb->startHeartbeat(hb, ws, interval)
  }
  
  case _ => print("Invalid data")
}

print("test")

let frame = receiveFrame(ws)
if frame == "" then {} else {
  print(frame)
}
