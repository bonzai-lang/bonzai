require "std:language/parser"
require "std:datatypes/tuple"
require "std:datatypes/error"
require "std:datatypes/list"
require "std:math"
require "std:datatypes/map"
require "std:datatypes/unit"
require "std:datatypes/string"

type HTML {
  Tag(tag: string, attributes: Map<string>, children: list<HTML>),
  SelfClosingTag(tag: string, attributes: Map<string>),
  Text(text: string)
}

let charLiteral = Parser::choice([
    Parser::char('\\') :Parser::right: Parser::char('\\'),
    Parser::char('\\') :Parser::right: Parser::char('"'),
    Parser::char('\\') :Parser::right: Parser::char('/'),
    Parser::char('\\') :Parser::right: Parser::char('b')
      :Parser::bind: fn(_) => fn(input) => ParseResult('\b', input),
    Parser::char('\\') :Parser::right: Parser::char('f')  
      :Parser::bind: fn(_) => fn(input) => ParseResult('\f', input),
    Parser::char('\\') :Parser::right: Parser::char('n')  
      :Parser::bind: fn(_) => fn(input) => ParseResult('\n', input),
    Parser::char('\\') :Parser::right: Parser::char('r')  
      :Parser::bind: fn(_) => fn(input) => ParseResult('\r', input),
    Parser::char('\\') :Parser::right: Parser::char('t')  
      :Parser::bind: fn(_) => fn(input) => ParseResult('\t', input)
  ])

let stringLiteral = Parser::char('"') 
            :Parser::right: (Parser::many(Parser::or(charLiteral, Parser::satisfy(fn (x) => x != '"')))
              :Parser::map: fn(xs) => xs.implode())
            :Parser::left: Parser::char('"')

let ws = Parser::satisfy(is_whitespace).Parser::many()

let attribute = (Parser::satisfy(fn (c) => is_alphanumeric(c) || c == '-').Parser::many1() :Parser::map: fn(xs) => xs.implode())
            :Parser::bind: fn(name) => 
              ws 
                :Parser::right: Parser::char('=') 
                :Parser::right: ws 
                :Parser::right: stringLiteral
                :Parser::map: fn(value) => (name, value)

fn HTMLParser(): fn(list<char>): Result<HTML> => {
  let tag = Parser::satisfy(is_alphanumeric).Parser::many1() :Parser::map: fn(xs) => xs.implode()

  let block = Parser::char('<') 
              :Parser::right: tag 
              :Parser::bind: fn(tagName) => 
                ws 
                  :Parser::right: (attribute.Parser::many() :Parser::map: fn(xs) => Map::fromList(xs))
                  :Parser::bind: fn(attrs) => 
                    ws 
                      :Parser::right: Parser::char('>')
                      :Parser::right: ws
                      :Parser::right: Parser::many(ws :Parser::right: Parser::lazy(HTMLParser) :Parser::left: ws)
                      :Parser::map: (fn(children) => Tag(tagName, attrs, children))
                      :Parser::left: ws
                      :Parser::left: Parser::string("</" + tagName + ">")

  let selfClosingTag = Parser::char('<') 
                      :Parser::right: tag 
                      :Parser::bind: fn(tagName) => 
                        ws 
                          :Parser::right: (attribute.Parser::many() :Parser::map: fn(xs) => Map::fromList(xs))
                          :Parser::map: (fn(attrs) => SelfClosingTag(tagName, attrs))
                          :Parser::left: Parser::string("/>")

  let text = Parser::many1(Parser::satisfy(fn (c) => c != '<')) :Parser::map: fn(xs) => Text(xs.implode())

  Parser::choice([selfClosingTag.Parser::try(), block, text])
}

fn renderHTML(html: HTML): string => 
  match html {
    case Tag(tag, attrs, children) => {
      let attrStr = Map::foldl(attrs, fn (acc, k, v) => acc + " " + k + "=\"" + v + "\"", "")
      
      let childrenStr = List::foldl(fn (child, acc) => acc + renderHTML(child), "", children)
      
      "<" + tag + attrStr + ">" + childrenStr + "</" + tag + ">"
    }

    case SelfClosingTag(tag, attrs) => {
      let attrStr = Map::foldl(attrs, fn (acc, k, v) => acc + " " + k + "=\"" + v + "\"", "")
      
      "<" + tag + attrStr + "/>"
    }

    case Text(text) => text
  }

fn parseHTML(input: string): Throwable<HTML> =>
  match HTMLParser()(input.explode()) {
    case ParseResult(html, _) => Ok(html)
    case ParseError(err, _) => Error("Parse error: " + err)
  }