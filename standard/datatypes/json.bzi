require "std:language/parser": 
  choice, right, char, Parser::bind, 
  Parser::pure, many, satisfy, is_whitespace, 
  left, Parser::map, or, implode, many1, 
  is_digit, toInt, Parser::andThen, toFloat, 
  string, sepBy, lazy, runParser, explode
require "std:datatypes/optional"
require "std:datatypes/tuple": Tuple::first, Tuple, Tuple::second, Map::toList
require "std:datatypes/list"
require "std:datatypes/map"
require "std:datatypes/string"
require "std:math"
require "std:datatypes/error"
require "std:datatypes/unit"
require "std:io"

pub type JSON {
  Object(fields: list<(string, JSON)>),
  Array(values: list<JSON>),
  String(value: string),
  Integer(value: int),
  Float(value: float),
  Boolean(value: bool),
  Null
}

pub let json = {
  object: fn(fields: list<(string, JSON)>) => Object(fields),
  array: fn(values: list<JSON>) => Array(values),
  string: fn(value: string) => String(value),
  integer: fn(value: int) => Integer(value),
  float: fn(value: float) => Float(value),
  boolean: fn(value: bool) => Boolean(value),
  null: Null
}

fn jsonParser(): Parser<JSON> => {
  let charLiteral = choice([
    char('\\') :right: char('\\'),
    char('\\') :right: char('"'),
    char('\\') :right: char('/'),
    char('\\') :right: char('b')  :Parser::bind: fn(_) => Parser::pure('\b'),
    char('\\') :right: char('f')  :Parser::bind: fn(_) => Parser::pure('\f'),
    char('\\') :right: char('n')  :Parser::bind: fn(_) => Parser::pure('\n'),
    char('\\') :right: char('r')  :Parser::bind: fn(_) => Parser::pure('\r'),
    char('\\') :right: char('t')  :Parser::bind: fn(_) => Parser::pure('\t')
  ])

  let ws = satisfy(is_whitespace).many()

  let str = char('"') 
            :right: (many(or(charLiteral, satisfy(fn (x) => x != '"')))
              :Parser::map: fn(xs) => String(xs.implode()))
            :left: char('"')

  let integer = satisfy(is_digit).many1() :Parser::map: fn(xs) => Integer(xs.implode().toInt())

  let float = integer 
            :Parser::bind: fn(intPart) => char('.')
            :Parser::andThen: integer
            :Parser::map: fn(fracPart) => 
              Float((intPart.toString() + "." + fracPart.toString()).toFloat())

  let boolean = choice([
    string("true") :Parser::map: fn(_) => Boolean(true),
    string("false") :Parser::map: fn(_) => Boolean(false)
  ])

  let null = string("null") :Parser::map: fn(_) => Null

  let value = ws :right: choice([
    str,
    integer,
    float,
    boolean,
    null
  ]) :left: ws

  let array = char('[') 
              :right: jsonParser.lazy().sepBy(char(','))
              :left: char(']')
              :Parser::map: fn(xs) => Array(xs)

  let field = char('"') 
              :right: (satisfy(fn (x) => x != '"').many()
                :Parser::map: fn(xs) => xs.implode())
              :left: char('"')
              :Parser::bind: fn (key) =>
              ws :right: char(':') :left: ws
              :Parser::andThen: jsonParser.lazy()
              :Parser::map: fn(value) => (key, value)

  let object = char('{') 
              :right: ws
              :right: field.sepBy(ws :left: char(',') :right: ws)
              :left: ws
              :left: char('}')
              :Parser::map: fn(xs) => Object(xs)

  choice([object, array, value])
}

fn parseJsonWithError(input: string): Throwable<JSON> => 
  match jsonParser().runParser(input.explode()) {
    case ParseResult(x, _) => Ok(x)
    case ParseError(msg, _) => Error(msg)
  }

fn parseJSON(input: string): Optional<JSON> => 
  match jsonParser().runParser(input.explode()) {
    case ParseResult(x, _) => Some(x)
    case ParseError(_, _) => None
  }

fn getJSON(input: string): JSON =>
  match parseJSON(input) {
    case Some(x) => x
    case None => Null
  }

pub fn JSON::parse(input: string): JSON => getJSON(input)

pub fn JSON::stringify(json: JSON): string =>
  match json {
    case Object(fields) => {
      let pairs = List::map(fields, fn (v) => 
        "\"" 
          + Tuple::first(v) 
          + "\":" 
          + JSON::stringify(Tuple::second(v))
      )

      "{" + String::join(pairs, ",") + "}"
    }
    case Array(values) => 
      "[" + String::join(List::map(values, JSON::stringify), ",") + "]"
    case String(val) => "\"" + val + "\""
    case Integer(val) => val.toString()
    case Float(val) => val.toString()
    case Boolean(val) => if val then "true" else "false"
    case Null => "null"
  }

pub fn getKey(json: JSON, key: string): Optional<JSON> =>
  match json {
    case Object(fields) => {
      List::foldl(fn (field, acc) =>
        match acc {
          case Some(x) => Some(x)
          case None => 
            if Tuple::first(field) == key 
              then Some(Tuple::second(field)) 
              else None
        },
        None,
        fields
      )
    }
    case _ => None
  }

pub fn getKeys(json: JSON, keys: list<string>): Optional<JSON> =>
  List::foldl(fn (key, acc) =>
    match acc {
      case Some(x) => getKey(x, key)
      case None => None
    },
    Some(json),
    keys
  )

pub fn JSON::prettify(json: JSON, tabs _?: int): string => {
  let i = Optional::unwrap_or(kwargs->tabs, 0)  

  match json {
    case Object(fields) => {
      let pairs = List::map(fields, fn (v) => 
        String::concat([
          String::repeat(" ", i + 2), 
          "\"", 
          Tuple::first(v), 
          "\": ", 
          JSON::prettify(Tuple::second(v), tabs: i + 2)
        ])
      )

      String::concat([
        "{\n", 
        String::repeat(" ", i), 
        String::join(pairs, ",\n"), 
        "\n", 
        String::repeat(" ", i), 
        "}"
      ])
    }
    case Array(values) => {
      let items = List::map(values, fn (v) => 
        String::concat([
          "\n", 
          String::repeat(" ", i + 2), 
          JSON::prettify(v, tabs: i + 2)
        ])
      )

      String::concat([
        "[\n", 
        String::repeat(" ", i), 
        String::join(items, ",\n"), 
        "\n", 
        String::repeat(" ", i), 
        "]"
      ])
    }
    case _ => JSON::stringify(json)
  }
}