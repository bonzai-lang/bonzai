require "std:natives"
require "std:http"

fn range(start: int, end: int): list<int> => {
  match start < end {
    case true => [start] + range(start + 1, end)
    case false => []
  }
}

fn createParallelHTTP(quantity: int, f: fn(Request, int): unit) => {
  // Creating a list of HTTP instances
  let instances = range(0, quantity).map(fn(port) => {
    let newPort = 8001 + port
    let httpServer = spawn HTTPServer(newPort)
  })

  // Creating the main dispatcher instance
  let initialInstance = spawn HTTPServer(8000)

  initialInstance->listen(fn(req) => {
    // Randomly dispatching the request to one of the instances
    let dispatcher = random() % quantity
    let dispatchedPort = 8001 + dispatcher

    // Fetching the response from the dispatched instance
    let res = fetch("http://localhost:$dispatchedPort")

    // Sending the response back to the client
    match res {
      case Ok(Tuple(buffer, headers)) => send_buffer_with(req, headers + buffer)
      case Error(e) => send_buffer(req, "Error: $e")
    }
  })
}